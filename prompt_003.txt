I liked the Postgres choice because it is ACID, relational and is a very flexible tecnology as well, so no changes required on that point. I liked the way you designed the votes table to be like a relationship table between users and features tables. But could you add a vote_count in the features table so it consolidates the vote count without having to run a count query every time we want to know its value? I'm planning to build the API in Go, so I would ask you to go a little bit further in this stage and format the schema.sql in the required format for the sql-migrate library (https://github.com/rubenv/sql-migrate) in a migrations folder. Update the database setup to instead of requiring to install postgres software, just make a `make infra` command, heres how it will work: 1) create a docker-compose.yaml field containing a database service (which is our Postgres), please choose a public image on Dockerhub that contains sql-migrate; 2) create a Makefile with a infra target, so it starts the database, add default values for the POSTGRES_HOSTNAME, POSTGRES_PORT, POSTGRES_ADMIN_USERNAME, POSTGRES_ADMIN_PASSWORD, POSTGRES_STANDARD_USERNAME, POSTGRES_STANDARD_PASSWORD and POSTGRES_DB environment variables; 3) create a shell script on the migrations folder to create the database and users if not created yet (use the postgres environment variables)