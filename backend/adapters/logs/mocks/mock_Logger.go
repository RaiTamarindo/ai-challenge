// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	logs "github.com/feature-voting-platform/backend/adapters/logs"
	mock "github.com/stretchr/testify/mock"
)

// MockLogger is an autogenerated mock type for the Logger type
type MockLogger struct {
	mock.Mock
}

type MockLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogger) EXPECT() *MockLogger_Expecter {
	return &MockLogger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function with given fields: message, fields
func (_m *MockLogger) Debug(message string, fields ...logs.LogField) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockLogger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type MockLogger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - message string
//   - fields ...logs.LogField
func (_e *MockLogger_Expecter) Debug(message interface{}, fields ...interface{}) *MockLogger_Debug_Call {
	return &MockLogger_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{message}, fields...)...)}
}

func (_c *MockLogger_Debug_Call) Run(run func(message string, fields ...logs.LogField)) *MockLogger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]logs.LogField, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(logs.LogField)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Debug_Call) Return() *MockLogger_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Debug_Call) RunAndReturn(run func(string, ...logs.LogField)) *MockLogger_Debug_Call {
	_c.Run(run)
	return _c
}

// Error provides a mock function with given fields: message, err, fields
func (_m *MockLogger) Error(message string, err error, fields ...logs.LogField) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, message, err)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockLogger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockLogger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - message string
//   - err error
//   - fields ...logs.LogField
func (_e *MockLogger_Expecter) Error(message interface{}, err interface{}, fields ...interface{}) *MockLogger_Error_Call {
	return &MockLogger_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{message, err}, fields...)...)}
}

func (_c *MockLogger_Error_Call) Run(run func(message string, err error, fields ...logs.LogField)) *MockLogger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]logs.LogField, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(logs.LogField)
			}
		}
		run(args[0].(string), args[1].(error), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Error_Call) Return() *MockLogger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Error_Call) RunAndReturn(run func(string, error, ...logs.LogField)) *MockLogger_Error_Call {
	_c.Run(run)
	return _c
}

// Info provides a mock function with given fields: message, fields
func (_m *MockLogger) Info(message string, fields ...logs.LogField) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockLogger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockLogger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - message string
//   - fields ...logs.LogField
func (_e *MockLogger_Expecter) Info(message interface{}, fields ...interface{}) *MockLogger_Info_Call {
	return &MockLogger_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{message}, fields...)...)}
}

func (_c *MockLogger_Info_Call) Run(run func(message string, fields ...logs.LogField)) *MockLogger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]logs.LogField, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(logs.LogField)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Info_Call) Return() *MockLogger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Info_Call) RunAndReturn(run func(string, ...logs.LogField)) *MockLogger_Info_Call {
	_c.Run(run)
	return _c
}

// Warning provides a mock function with given fields: message, fields
func (_m *MockLogger) Warning(message string, fields ...logs.LogField) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockLogger_Warning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warning'
type MockLogger_Warning_Call struct {
	*mock.Call
}

// Warning is a helper method to define mock.On call
//   - message string
//   - fields ...logs.LogField
func (_e *MockLogger_Expecter) Warning(message interface{}, fields ...interface{}) *MockLogger_Warning_Call {
	return &MockLogger_Warning_Call{Call: _e.mock.On("Warning",
		append([]interface{}{message}, fields...)...)}
}

func (_c *MockLogger_Warning_Call) Run(run func(message string, fields ...logs.LogField)) *MockLogger_Warning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]logs.LogField, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(logs.LogField)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Warning_Call) Return() *MockLogger_Warning_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Warning_Call) RunAndReturn(run func(string, ...logs.LogField)) *MockLogger_Warning_Call {
	_c.Run(run)
	return _c
}

// NewMockLogger creates a new instance of MockLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogger {
	mock := &MockLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
