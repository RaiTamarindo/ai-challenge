// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	auth "github.com/feature-voting-platform/backend/adapters/auth"
	mock "github.com/stretchr/testify/mock"
)

// MockTokenService is an autogenerated mock type for the TokenService type
type MockTokenService struct {
	mock.Mock
}

type MockTokenService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenService) EXPECT() *MockTokenService_Expecter {
	return &MockTokenService_Expecter{mock: &_m.Mock}
}

// GenerateToken provides a mock function with given fields: userID, username, email
func (_m *MockTokenService) GenerateToken(userID int, username string, email string) (string, error) {
	ret := _m.Called(userID, username, email)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string, string) (string, error)); ok {
		return rf(userID, username, email)
	}
	if rf, ok := ret.Get(0).(func(int, string, string) string); ok {
		r0 = rf(userID, username, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int, string, string) error); ok {
		r1 = rf(userID, username, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenService_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type MockTokenService_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - userID int
//   - username string
//   - email string
func (_e *MockTokenService_Expecter) GenerateToken(userID interface{}, username interface{}, email interface{}) *MockTokenService_GenerateToken_Call {
	return &MockTokenService_GenerateToken_Call{Call: _e.mock.On("GenerateToken", userID, username, email)}
}

func (_c *MockTokenService_GenerateToken_Call) Run(run func(userID int, username string, email string)) *MockTokenService_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockTokenService_GenerateToken_Call) Return(_a0 string, _a1 error) *MockTokenService_GenerateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenService_GenerateToken_Call) RunAndReturn(run func(int, string, string) (string, error)) *MockTokenService_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function with given fields: tokenString
func (_m *MockTokenService) ValidateToken(tokenString string) (*auth.Claims, error) {
	ret := _m.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 *auth.Claims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*auth.Claims, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) *auth.Claims); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Claims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenService_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type MockTokenService_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - tokenString string
func (_e *MockTokenService_Expecter) ValidateToken(tokenString interface{}) *MockTokenService_ValidateToken_Call {
	return &MockTokenService_ValidateToken_Call{Call: _e.mock.On("ValidateToken", tokenString)}
}

func (_c *MockTokenService_ValidateToken_Call) Run(run func(tokenString string)) *MockTokenService_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTokenService_ValidateToken_Call) Return(_a0 *auth.Claims, _a1 error) *MockTokenService_ValidateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenService_ValidateToken_Call) RunAndReturn(run func(string) (*auth.Claims, error)) *MockTokenService_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTokenService creates a new instance of MockTokenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokenService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokenService {
	mock := &MockTokenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
