// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	features "github.com/feature-voting-platform/backend/domain/features"
	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: feature
func (_m *MockRepository) Create(feature *features.Feature) error {
	ret := _m.Called(feature)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*features.Feature) error); ok {
		r0 = rf(feature)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - feature *features.Feature
func (_e *MockRepository_Expecter) Create(feature interface{}) *MockRepository_Create_Call {
	return &MockRepository_Create_Call{Call: _e.mock.On("Create", feature)}
}

func (_c *MockRepository_Create_Call) Run(run func(feature *features.Feature)) *MockRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*features.Feature))
	})
	return _c
}

func (_c *MockRepository_Create_Call) Return(_a0 error) *MockRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Create_Call) RunAndReturn(run func(*features.Feature) error) *MockRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *MockRepository) Delete(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id int
func (_e *MockRepository_Expecter) Delete(id interface{}) *MockRepository_Delete_Call {
	return &MockRepository_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *MockRepository_Delete_Call) Run(run func(id int)) *MockRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockRepository_Delete_Call) Return(_a0 error) *MockRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Delete_Call) RunAndReturn(run func(int) error) *MockRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FeatureExists provides a mock function with given fields: id
func (_m *MockRepository) FeatureExists(id int) (bool, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FeatureExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_FeatureExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FeatureExists'
type MockRepository_FeatureExists_Call struct {
	*mock.Call
}

// FeatureExists is a helper method to define mock.On call
//   - id int
func (_e *MockRepository_Expecter) FeatureExists(id interface{}) *MockRepository_FeatureExists_Call {
	return &MockRepository_FeatureExists_Call{Call: _e.mock.On("FeatureExists", id)}
}

func (_c *MockRepository_FeatureExists_Call) Run(run func(id int)) *MockRepository_FeatureExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockRepository_FeatureExists_Call) Return(_a0 bool, _a1 error) *MockRepository_FeatureExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_FeatureExists_Call) RunAndReturn(run func(int) (bool, error)) *MockRepository_FeatureExists_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: page, perPage, userID
func (_m *MockRepository) GetAll(page int, perPage int, userID *int) ([]features.Feature, int, error) {
	ret := _m.Called(page, perPage, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []features.Feature
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, *int) ([]features.Feature, int, error)); ok {
		return rf(page, perPage, userID)
	}
	if rf, ok := ret.Get(0).(func(int, int, *int) []features.Feature); ok {
		r0 = rf(page, perPage, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]features.Feature)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, *int) int); ok {
		r1 = rf(page, perPage, userID)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int, int, *int) error); ok {
		r2 = rf(page, perPage, userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - page int
//   - perPage int
//   - userID *int
func (_e *MockRepository_Expecter) GetAll(page interface{}, perPage interface{}, userID interface{}) *MockRepository_GetAll_Call {
	return &MockRepository_GetAll_Call{Call: _e.mock.On("GetAll", page, perPage, userID)}
}

func (_c *MockRepository_GetAll_Call) Run(run func(page int, perPage int, userID *int)) *MockRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int), args[2].(*int))
	})
	return _c
}

func (_c *MockRepository_GetAll_Call) Return(_a0 []features.Feature, _a1 int, _a2 error) *MockRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockRepository_GetAll_Call) RunAndReturn(run func(int, int, *int) ([]features.Feature, int, error)) *MockRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByCreatedBy provides a mock function with given fields: userID
func (_m *MockRepository) GetByCreatedBy(userID int) ([]features.Feature, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByCreatedBy")
	}

	var r0 []features.Feature
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]features.Feature, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []features.Feature); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]features.Feature)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetByCreatedBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByCreatedBy'
type MockRepository_GetByCreatedBy_Call struct {
	*mock.Call
}

// GetByCreatedBy is a helper method to define mock.On call
//   - userID int
func (_e *MockRepository_Expecter) GetByCreatedBy(userID interface{}) *MockRepository_GetByCreatedBy_Call {
	return &MockRepository_GetByCreatedBy_Call{Call: _e.mock.On("GetByCreatedBy", userID)}
}

func (_c *MockRepository_GetByCreatedBy_Call) Run(run func(userID int)) *MockRepository_GetByCreatedBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockRepository_GetByCreatedBy_Call) Return(_a0 []features.Feature, _a1 error) *MockRepository_GetByCreatedBy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetByCreatedBy_Call) RunAndReturn(run func(int) ([]features.Feature, error)) *MockRepository_GetByCreatedBy_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: id, userID
func (_m *MockRepository) GetByID(id int, userID *int) (*features.Feature, error) {
	ret := _m.Called(id, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *features.Feature
	var r1 error
	if rf, ok := ret.Get(0).(func(int, *int) (*features.Feature, error)); ok {
		return rf(id, userID)
	}
	if rf, ok := ret.Get(0).(func(int, *int) *features.Feature); ok {
		r0 = rf(id, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*features.Feature)
		}
	}

	if rf, ok := ret.Get(1).(func(int, *int) error); ok {
		r1 = rf(id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id int
//   - userID *int
func (_e *MockRepository_Expecter) GetByID(id interface{}, userID interface{}) *MockRepository_GetByID_Call {
	return &MockRepository_GetByID_Call{Call: _e.mock.On("GetByID", id, userID)}
}

func (_c *MockRepository_GetByID_Call) Run(run func(id int, userID *int)) *MockRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(*int))
	})
	return _c
}

func (_c *MockRepository_GetByID_Call) Return(_a0 *features.Feature, _a1 error) *MockRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetByID_Call) RunAndReturn(run func(int, *int) (*features.Feature, error)) *MockRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: id, title, description
func (_m *MockRepository) Update(id int, title *string, description *string) error {
	ret := _m.Called(id, title, description)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *string, *string) error); ok {
		r0 = rf(id, title, description)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - id int
//   - title *string
//   - description *string
func (_e *MockRepository_Expecter) Update(id interface{}, title interface{}, description interface{}) *MockRepository_Update_Call {
	return &MockRepository_Update_Call{Call: _e.mock.On("Update", id, title, description)}
}

func (_c *MockRepository_Update_Call) Run(run func(id int, title *string, description *string)) *MockRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(*string), args[2].(*string))
	})
	return _c
}

func (_c *MockRepository_Update_Call) Return(_a0 error) *MockRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Update_Call) RunAndReturn(run func(int, *string, *string) error) *MockRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
