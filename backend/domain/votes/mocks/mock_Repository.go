// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	votes "github.com/feature-voting-platform/backend/domain/votes"
	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// AddVote provides a mock function with given fields: userID, featureID
func (_m *MockRepository) AddVote(userID int, featureID int) error {
	ret := _m.Called(userID, featureID)

	if len(ret) == 0 {
		panic("no return value specified for AddVote")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userID, featureID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_AddVote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddVote'
type MockRepository_AddVote_Call struct {
	*mock.Call
}

// AddVote is a helper method to define mock.On call
//   - userID int
//   - featureID int
func (_e *MockRepository_Expecter) AddVote(userID interface{}, featureID interface{}) *MockRepository_AddVote_Call {
	return &MockRepository_AddVote_Call{Call: _e.mock.On("AddVote", userID, featureID)}
}

func (_c *MockRepository_AddVote_Call) Run(run func(userID int, featureID int)) *MockRepository_AddVote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *MockRepository_AddVote_Call) Return(_a0 error) *MockRepository_AddVote_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_AddVote_Call) RunAndReturn(run func(int, int) error) *MockRepository_AddVote_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserVotes provides a mock function with given fields: userID
func (_m *MockRepository) GetUserVotes(userID int) ([]votes.Vote, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserVotes")
	}

	var r0 []votes.Vote
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]votes.Vote, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []votes.Vote); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]votes.Vote)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetUserVotes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserVotes'
type MockRepository_GetUserVotes_Call struct {
	*mock.Call
}

// GetUserVotes is a helper method to define mock.On call
//   - userID int
func (_e *MockRepository_Expecter) GetUserVotes(userID interface{}) *MockRepository_GetUserVotes_Call {
	return &MockRepository_GetUserVotes_Call{Call: _e.mock.On("GetUserVotes", userID)}
}

func (_c *MockRepository_GetUserVotes_Call) Run(run func(userID int)) *MockRepository_GetUserVotes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockRepository_GetUserVotes_Call) Return(_a0 []votes.Vote, _a1 error) *MockRepository_GetUserVotes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetUserVotes_Call) RunAndReturn(run func(int) ([]votes.Vote, error)) *MockRepository_GetUserVotes_Call {
	_c.Call.Return(run)
	return _c
}

// HasUserVoted provides a mock function with given fields: userID, featureID
func (_m *MockRepository) HasUserVoted(userID int, featureID int) (bool, error) {
	ret := _m.Called(userID, featureID)

	if len(ret) == 0 {
		panic("no return value specified for HasUserVoted")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (bool, error)); ok {
		return rf(userID, featureID)
	}
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(userID, featureID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userID, featureID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_HasUserVoted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasUserVoted'
type MockRepository_HasUserVoted_Call struct {
	*mock.Call
}

// HasUserVoted is a helper method to define mock.On call
//   - userID int
//   - featureID int
func (_e *MockRepository_Expecter) HasUserVoted(userID interface{}, featureID interface{}) *MockRepository_HasUserVoted_Call {
	return &MockRepository_HasUserVoted_Call{Call: _e.mock.On("HasUserVoted", userID, featureID)}
}

func (_c *MockRepository_HasUserVoted_Call) Run(run func(userID int, featureID int)) *MockRepository_HasUserVoted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *MockRepository_HasUserVoted_Call) Return(_a0 bool, _a1 error) *MockRepository_HasUserVoted_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_HasUserVoted_Call) RunAndReturn(run func(int, int) (bool, error)) *MockRepository_HasUserVoted_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveVote provides a mock function with given fields: userID, featureID
func (_m *MockRepository) RemoveVote(userID int, featureID int) error {
	ret := _m.Called(userID, featureID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveVote")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userID, featureID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_RemoveVote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveVote'
type MockRepository_RemoveVote_Call struct {
	*mock.Call
}

// RemoveVote is a helper method to define mock.On call
//   - userID int
//   - featureID int
func (_e *MockRepository_Expecter) RemoveVote(userID interface{}, featureID interface{}) *MockRepository_RemoveVote_Call {
	return &MockRepository_RemoveVote_Call{Call: _e.mock.On("RemoveVote", userID, featureID)}
}

func (_c *MockRepository_RemoveVote_Call) Run(run func(userID int, featureID int)) *MockRepository_RemoveVote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *MockRepository_RemoveVote_Call) Return(_a0 error) *MockRepository_RemoveVote_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_RemoveVote_Call) RunAndReturn(run func(int, int) error) *MockRepository_RemoveVote_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
